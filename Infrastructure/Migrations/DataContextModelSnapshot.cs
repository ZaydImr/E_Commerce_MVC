// <auto-generated />
using System;
using Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Infrastructure.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.10")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Core.Entities.Cart", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Qte")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("idItem")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("idUser")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.HasIndex("Username");

                    b.ToTable("Cart");
                });

            modelBuilder.Entity("Core.Entities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("NameCategory")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("Core.Entities.Commande", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<DateTime>("DateCommande")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PaymentMethodeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("QteCommande")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("idItem")
                        .HasColumnType("int");

                    b.Property<Guid>("idPaymentMethode")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("idUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("priceCommande")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.HasIndex("PaymentMethodeId");

                    b.HasIndex("Username");

                    b.ToTable("Commande");
                });

            modelBuilder.Entity("Core.Entities.Delivery", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CommandeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DeliveryManUsername")
                        .HasColumnType("nvarchar(450)");

                    b.Property<float>("PriceDelivery")
                        .HasColumnType("real");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("dateDelivery")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("idCommande")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("idDeliveryMan")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CommandeId");

                    b.HasIndex("DeliveryManUsername");

                    b.ToTable("Delivery");
                });

            modelBuilder.Entity("Core.Entities.Image", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Image");
                });

            modelBuilder.Entity("Core.Entities.Item", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AdresseItem")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DatePost")
                        .HasColumnType("datetime2");

                    b.Property<string>("DescriptionItem")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ImageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("NameItem")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("PriceItem")
                        .HasColumnType("real");

                    b.Property<int>("QteItem")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Views")
                        .HasColumnType("int");

                    b.Property<Guid>("idCategory")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("idImage")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("idUser")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ImageId");

                    b.HasIndex("Username");

                    b.ToTable("Item");
                });

            modelBuilder.Entity("Core.Entities.ItemPaymentMethode", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PaymentMethodeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("idItem")
                        .HasColumnType("int");

                    b.Property<Guid>("idPaymentMethode")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.HasIndex("PaymentMethodeId");

                    b.ToTable("ItemPaymentMethode");
                });

            modelBuilder.Entity("Core.Entities.Message", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateMessage")
                        .HasColumnType("datetime2");

                    b.Property<string>("usernameProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("usernameReceiver")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("usernameProvider");

                    b.HasIndex("usernameReceiver");

                    b.ToTable("Message");
                });

            modelBuilder.Entity("Core.Entities.PaymentMethode", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("NameMethode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PaymentMethode");
                });

            modelBuilder.Entity("Core.Entities.TypeUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("nameType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TypeUser");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5849b298-1663-4b57-9356-e8af058e24b8"),
                            nameType = "User"
                        });
                });

            modelBuilder.Entity("Core.Entities.User", b =>
                {
                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AdresseUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Fullname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Numero")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("TypeUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("idTypeUser")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Username");

                    b.HasIndex("TypeUserId");

                    b.ToTable("User");

                    b.HasData(
                        new
                        {
                            Username = "test",
                            Numero = "0618053929",
                            Password = "test",
                            idTypeUser = new Guid("5849b298-1663-4b57-9356-e8af058e24b8")
                        });
                });

            modelBuilder.Entity("Core.Entities.Cart", b =>
                {
                    b.HasOne("Core.Entities.Item", "Item")
                        .WithMany("carts")
                        .HasForeignKey("ItemId");

                    b.HasOne("Core.Entities.User", "User")
                        .WithMany("carts")
                        .HasForeignKey("Username");

                    b.Navigation("Item");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Core.Entities.Commande", b =>
                {
                    b.HasOne("Core.Entities.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId");

                    b.HasOne("Core.Entities.PaymentMethode", "PaymentMethode")
                        .WithMany("commandes")
                        .HasForeignKey("PaymentMethodeId");

                    b.HasOne("Core.Entities.User", "User")
                        .WithMany("commandes")
                        .HasForeignKey("Username");

                    b.Navigation("Item");

                    b.Navigation("PaymentMethode");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Core.Entities.Delivery", b =>
                {
                    b.HasOne("Core.Entities.Commande", "Commande")
                        .WithMany("deliveries")
                        .HasForeignKey("CommandeId");

                    b.HasOne("Core.Entities.User", "DeliveryMan")
                        .WithMany("deliveries")
                        .HasForeignKey("DeliveryManUsername");

                    b.Navigation("Commande");

                    b.Navigation("DeliveryMan");
                });

            modelBuilder.Entity("Core.Entities.Item", b =>
                {
                    b.HasOne("Core.Entities.Category", "Category")
                        .WithMany("items")
                        .HasForeignKey("CategoryId");

                    b.HasOne("Core.Entities.Image", "Image")
                        .WithMany("items")
                        .HasForeignKey("ImageId");

                    b.HasOne("Core.Entities.User", "User")
                        .WithMany("items")
                        .HasForeignKey("Username");

                    b.Navigation("Category");

                    b.Navigation("Image");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Core.Entities.ItemPaymentMethode", b =>
                {
                    b.HasOne("Core.Entities.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId");

                    b.HasOne("Core.Entities.PaymentMethode", "PaymentMethode")
                        .WithMany("itemPaymentMethodes")
                        .HasForeignKey("PaymentMethodeId");

                    b.Navigation("Item");

                    b.Navigation("PaymentMethode");
                });

            modelBuilder.Entity("Core.Entities.Message", b =>
                {
                    b.HasOne("Core.Entities.User", "UserProvider")
                        .WithMany("messagesSender")
                        .HasForeignKey("usernameProvider");

                    b.HasOne("Core.Entities.User", "UserReceiver")
                        .WithMany("messagesReceiver")
                        .HasForeignKey("usernameReceiver");

                    b.Navigation("UserProvider");

                    b.Navigation("UserReceiver");
                });

            modelBuilder.Entity("Core.Entities.User", b =>
                {
                    b.HasOne("Core.Entities.TypeUser", "TypeUser")
                        .WithMany("Users")
                        .HasForeignKey("TypeUserId");

                    b.Navigation("TypeUser");
                });

            modelBuilder.Entity("Core.Entities.Category", b =>
                {
                    b.Navigation("items");
                });

            modelBuilder.Entity("Core.Entities.Commande", b =>
                {
                    b.Navigation("deliveries");
                });

            modelBuilder.Entity("Core.Entities.Image", b =>
                {
                    b.Navigation("items");
                });

            modelBuilder.Entity("Core.Entities.Item", b =>
                {
                    b.Navigation("carts");
                });

            modelBuilder.Entity("Core.Entities.PaymentMethode", b =>
                {
                    b.Navigation("commandes");

                    b.Navigation("itemPaymentMethodes");
                });

            modelBuilder.Entity("Core.Entities.TypeUser", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Core.Entities.User", b =>
                {
                    b.Navigation("carts");

                    b.Navigation("commandes");

                    b.Navigation("deliveries");

                    b.Navigation("items");

                    b.Navigation("messagesReceiver");

                    b.Navigation("messagesSender");
                });
#pragma warning restore 612, 618
        }
    }
}
